#ifndef SCREEN_H
#define SCREEN_H

#include <SFML/Graphics.hpp>

/// <summary>
/// Abstract class that declares several pure virtual functions that every screen implementation must override because the ScreenManager
/// will call on them.
/// </summary>
class Screen
{
public:
	/// <summary>
	/// Draw the contents of the screen to the window.
	/// </summary>
	/// <param name="window">The window to which to draw.</param>
	virtual void drawTo(sf::RenderWindow& window) = 0;

	/// <summary>
	/// Process the user's keyboard input.
	/// </summary>
	virtual void processKeyboardInput() = 0;

	/// <summary>
	/// Process the current mouse position.
	/// </summary>
	/// <param name="mouseWindowPosition">The current mouse position.</param>
	virtual void processMousePosition(sf::Vector2i mouseWindowPosition) = 0;

	/// <summary>
	/// Retrieves a calculated or private boolean flag that indicates whether the current screen or entire game should be exited.
	/// </summary>
	/// <returns>True if the current screen or entire game should be exited.</returns>
	virtual bool shouldExitGame() = 0;

	/// <summary>
	/// Handle the events that were generated by the window.
	/// </summary>
	/// <param name="window">The window that will generate the events.</param>
	virtual void handleEvents(sf::RenderWindow& window) = 0;

	/// <summary>
	/// Update the internal state of the screen.
	/// </summary>
	virtual void updateState() = 0;

	/// <summary>
	/// Sets the isLoading boolean.
	/// </summary>
	/// <param name="newStatus">The new boolean value of isStatus.</param>
	virtual void setIsLoading(bool newStatus)
	{
		isLoading = newStatus;
	}

protected:
	/// <summary>
	/// True if the current screen is in a loading state.
	/// </summary>
	bool isLoading = false;
};

#endif // !SCREEN_H
