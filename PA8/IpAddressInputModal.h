#ifndef IP_ADDRESS_INPUT_MODAL_H
#define IP_ADDRESS_INPUT_MODAL_H

#include "Modal.h"
#include "TextComponent.h"
#include "MoveableRectangle.h"

/// <summary>
/// This modal manages the workflow for gathering the necessary information from the user to connect to another player on the network.
/// </summary>
class IpAddressInputModal : public Modal
{
public:
	/// <summary>
	/// Initializes the video mode that will render this modal.
	/// </summary>
	/// <param name="vm">The video mode that will render this modal.</param>
	IpAddressInputModal(sf::VideoMode vm);

	~IpAddressInputModal();
	
	/// <summary>
	/// Draws this modal to the provided window.
	/// </summary>
	/// <param name="window">The window to draw to.</param>
	void drawTo(sf::RenderWindow& window);

	/// <summary>
	/// Updates the internal state of this component.
	/// </summary>
	void updateState();

	/// <summary>
	/// Handles the events generated by the provided window.
	/// </summary>
	/// <param name="window">The window that is generating the events.</param>
	void handleEvents(sf::RenderWindow& window);

	/// <summary>
	/// Returns true if the player has entered all necessary information and is ready to connect on the network.
	/// </summary>
	/// <returns>True if the player is ready to connect on the network.</returns>
	bool getIsReady();

	/// <summary>
	/// Gets the address entered by the player.
	/// </summary>
	/// <returns>The address entered by the player.</returns>
	std::string getAddress();

	/// <summary>
	/// Gets the port entered by the player.
	/// </summary>
	/// <returns>The port entered by the player.</returns>
	unsigned short getPort();

	/// <summary>
	/// Returns true if the user selected the server mode.
	/// </summary>
	/// <returns>True is user selected server mode.</returns>
	bool getIsServer();

	/// <summary>
	/// Returns true if the user has selected cancel and wants to return to the main menu.
	/// </summary>
	/// <returns>True if the user wants to go back to main menu without connecting on the network.</returns>
	bool getIsCancelling();

private:
	/// <summary>
	/// A pointer to the text component displaying the title of the modal.
	/// </summary>
	TextComponent* title;

	/// <summary>
	/// A pointer to the text component displaying the IP address input title.
	/// </summary>
	TextComponent* ipAddressTitle;

	/// <summary>
	/// A pointer to the text component displaying the user's IP address input.
	/// </summary>
	TextComponent* ipAddressInput;

	/// <summary>
	/// A pointer to the text component displaying the port input title.
	/// </summary>
	TextComponent* portTitle;
	
	/// <summary>
	/// A pointer to the text component displaying the user's port input.
	/// </summary>
	TextComponent* portInput;

	/// <summary>
	/// A pointer to the text component displaying the OK button.
	/// </summary>
	TextComponent* okButton;

	/// <summary>
	/// A pointer to the text component displaying the server button.
	/// </summary>
	TextComponent* serverButton;

	/// <summary>
	/// A pointer to the text component displaying the client button.
	/// </summary>
	TextComponent* clientButton;

	/// <summary>
	/// A pointer to the text component displaying the cancel button.
	/// </summary>
	TextComponent* cancelButton;
	
	/// <summary>
	/// Process a mouse click event.
	/// </summary>
	/// <param name="mousePosition">The position of the mouse click event.</param>
	void processMouseClick(sf::Vector2i mousePosition);

	/// <summary>
	/// The current IP address entered by the user.
	/// </summary>
	std::string currentIpAddress;

	/// <summary>
	/// The current port entered by the user.
	/// </summary>
	std::string currentPort;

	/// <summary>
	/// Handles text entered events, i.e. keyboard events related to entering text.
	/// </summary>
	/// <param name="enteredChar">The character entered by the user.</param>
	void handleTextEnteredEvent(sf::Uint32 enteredChar);

	/// <summary>
	/// Handles when the user presses the backspace button.
	/// </summary>
	void handleBackSpace();

	/// <summary>
	/// Handles adding text to the current selected input.
	/// </summary>
	/// <param name="charToAdd">The character to add to the currently selected input.</param>
	void handleAddText(char charToAdd);

	/// <summary>
	/// The video mode that will render this modal.
	/// </summary>
	sf::VideoMode videoMode;

	/// <summary>
	/// A pointer to the box representing the input area for the IP address.
	/// </summary>
	MoveableRectangle* ipInputBox;

	/// <summary>
	/// A pointer to the box representing the input area for the port.
	/// </summary>
	MoveableRectangle* portInputBox;

	/// <summary>
	/// A pointer to the border that highlights the currently selected box.
	/// </summary>
	MoveableRectangle* boxHighlighter;

	/// <summary>
	/// Is true when the IP address input box is selected.
	/// </summary>
	bool isIpInputSelected;

	/// <summary>
	/// Is true when the user is ready to connect to network.
	/// </summary>
	bool isReady;

	/// <summary>
	/// Is true if the user selected the server mode.
	/// </summary>
	bool isServer;

	/// <summary>
	/// Is true when the user cancelled connection on the network and wants to return to the main menu.
	/// </summary>
	bool isCancelling;
};

#endif // !IP_ADDRESS_INPUT_MODAL_H
